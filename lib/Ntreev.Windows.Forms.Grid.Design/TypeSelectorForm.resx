<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 19</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACc
        CAAAAk1TRnQBSQFMAgEBBAEAAYABAAGAAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AL0AA/EBmQEzAQAB/wHsAcy0AAPx
        AcwBZgEzAcwBmQEzAZkBMwEAA/FOAAP/AwAG/wkABv8DAAP/CQABxgHWAe8BZgKZAWYCmQJmAZkBMwFm
        AZkBMwFmAZkBMwJmATMCZgPAGwAD8QHMAWYBMwH/AcwBZgH/AZkBZgHMAZkBMwGZATMBAAPxTgAD6gOG
        AzMJAAMzA4YD6gwAATMCzAGZAcwB/wFmAcwB/wFmAcwB/wFmAswBZgLMATMCzAEzAswBMwJmGAAD8QHM
        AZkBZgH/AcwBmQH/AcwBmQH/AcwBZgH/AZkBZgHMAZkBMwGZATMBAAPxAwAD8RsAAmYBMwJmATMCZgEz
        AWYCMwFmAjMBZgIzAWYCMwFmAjMBZgIzDwADhgMWA+oJAAPqAxYDhgwAATMCzAGZAcwB/wGZAcwB/wKZ
        AWYCmQFmAZkDZgLMAWYCzAEzAmYbAAPxAcwBmQFmAf8BzAGZAf8BzAGZAf8BzAFmAf8BmQFmAcwBmQEz
        AZkBMwEAA/EBmQEzAZkD8RUAAZkCZgPqAcwCmQHMApkBzAKZA5YCmQFmApkBZgKZAWYBmQNmAjMJAAP/
        A00DFg8AAxYDTQP/CQABZgLMAZkBzAH/AZkBzAH/AZkBzAH/AWYBzAH/AWYBzAH/AWYBzAH/AWYCzAEz
        AmYbAAbXAcwBmQFmAf8BzAGZAf8BzAGZAf8BzAFmAcwBZgEzA+MBmQEzAZkBzAFmAcwBmQEzAZkD8QMA
        A8ABpAKgApkBZgYAAZkCZgPxA+oD4wPdA9cDzAPLA8ABmQNmAjMGAAb/A00DFg8AAxYDTQb/BgABZgLM
        AZkC/wGZAcwB/wKZAWYCmQFmAZkDZgHMAf8BZgHMAf8BMwFmAZkCZgGZATMBZgGZATMBZgGZATMCZgEz
        AmYDwAYAAdYC5wEAAWYBmQEAAWYBmQPXAcwBmQFmAf8BzAGZAcwBZgEzA+MBmQEzAZkB/wGZAf8BzAGZ
        AswBZgHMAZkBMwGZA/EDzAOyAaQCoAOyApkBZgKZAWYG8QPqA+MD3QPXA8wDywKZAmYCMwMAA/8DAAP/
        AxYDwA8AA8ADFgP/CQABZgLMAZkC/wGZAv8BmQHMAf8BmQHMAf8BmQHMAf8BZgHMAf8BZgHMAf8BMwFm
        AZkBZgHMAf8BZgLMAWYCzAEzAswBMwLMATMCZgMAAdYC5wEAAWYBmQEzAcwB/wEzAcwB/wEAAWYBmQPX
        AcwBmQFmA+MBzAFmAcwB/wGZAv8BmQL/AZkB/wHMAZkCzAFmAcwBmQEzAZkD6gPMA8AGAAKZAWYD+Abx
        A+oD4wPdA9cDzAKZAmYCMwMABv8DFgNmFQADZgMWA/8GAAHWAucBZgLMAWYCzAEzAswBMwLMATMCzAEz
        AZkBzAEzAZkBzAFmAswCmQFmApkBZgGZA2YCzAFmAswBMwJmAdYC5wEAAWYBmQFmAcwB/wEzAcwB/wEz
        AcwB/wEzAcwB/wEAAWYBmQTMAWYBzAH/AcwC/wHMAv8BzAL/AZkC/wGZAf8BzAFmAcwD8Q8AA5YD/wP4
        BvED6gPjA90D1wKZAmYCMwMAA/8DAAP/AzMDwA8AA8ADMwP/GwABZgLMAZkBzAH/AZkBzAH/AZkBzAH/
        AWYBzAH/AWYBzAH/AWYBzAH/AWYCzAEzAmYBAAFmApkBzAH/AWYBzAH/AWYBzAH/ATMBzAH/ATMBzAH/
        ATMBzAH/AQABZgGZAcYB1gHvAcwBZgHMAf8BzAL/AcwC/wHMAf8BzAFmAcwD8RIAAaQCoAb/A/gG8QPq
        A+MD3QPXAWYCMwkAA/8DTQMzDwADMwNNA/8bAAFmAswBmQL/AZkBzAH/ApkBZgKZAWYBmQNmAcwB/wFm
        AcwB/wEzAWYBmQEAAZkBzAGZAv8BmQHMAf8BZgHMAf8BZgHMAf8BMwHMAf8BMwHMAf8BMwHMAf8BAAFm
        AZkBxgHWAe8BzAFmAcwB/wHMAf8BzAFmAcwD8RgAAaQCoAGkAqADlgOGApkBZgGZAmYBmQdmATMMAAP/
        A00DMw8AAzMDTQP/GwABZgLMAZkC/wGZAv8BmQHMAf8BmQHMAf8BmQHMAf8BZgHMAf8BZgHMAf8BMwFm
        AZkB1gLnAQABmQHMAZkC/wGZAcwB/wFmAcwB/wFmAcwB/wEzAcwB/wEzAcwB/wEzAcwB/wEAAWYBmQHW
        AucBzAFmAcwD8UUAA4YDMwPdCQAD3QMzA4YeAAHWAucBZgLMAWYCzAEzAswBMwLMATMCzAEzAZkBzAEz
        AZkBzAHGAdYB7wMAAdYC5wEAAZkBzAGZAv8BmQHMAf8BZgHMAf8BZgHMAf8BMwHMAf8BAAGZAcwB1gLn
        AwAD8UgAA+oDhgMzCQADMwOGA+o/AAHWAucBAAGZAcwBmQL/AZkBzAH/AWYBzAH/AQABmQHMAdYC504A
        A/8DAAb/CQAG/wMAA/8/AAHWAucBAAGZAcwBmQL/AQABmQHMAcYB1gHvtAAB1gLnAQABmQHMAdYC5xsA
        AUIBTQE+BwABPgMAASgDAAFAAwABIAMAAQEBAAEBBgABARYAA/+BAAb/AfgH/wHwAX8C/wHpAcsBgAE/
        AeABPwL/AfEBxwGAAT8BwAEXAfwBAQHxAccBgAE/AeABAwH4AQAC4wGAAT8B4AEBARgBAAHDAeEBgAEA
        AcADAAGjAeMBgAEAAYABAAEYAQABhwHxAYADAAH4AQABowHjAf4CAAEBAfgBAALjAf4CAAEDAfwBAQLj
        Af4CAAEHAv8B8QHHAf4BAAGAAS8C/wHxAccC/wHAAX8C/wHpAcsC/wHgB/8B8QH/Cw==
</value>
  </data>
</root>